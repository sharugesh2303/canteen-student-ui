/* ==================================
Â * FILE: src/pages/DashboardPage.jsx
Â * ================================== */

import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from '../components/Navbar.jsx'; // Assuming this component exists
import { useCart } from '../context/CartContext.jsx'; // Assuming this context exists
import AdvertisementModal from '../components/AdvertisementModal.jsx'; // Assuming this component exists
import { FaCommentDots, FaCartPlus, FaHeart, FaRegHeart, FaArrowLeft } from 'react-icons/fa';
// ðŸŸ¢ UPDATED: Import icons, adding GiNotebook for both Stationery and Essentials
import { GiFastNoodles, GiNotebook, GiIceCreamCone, GiHotMeal } from 'react-icons/gi';
import axios from 'axios';

// --- API Configuration ---
// ðŸŸ¢ FIX: Use VITE_API_URL from environment variables (set in Vercel)
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'; 
// --- End API Config ---

const POLLING_INTERVAL = 15000;
const VIEWER_ROTATION_INTERVAL = 5000;

const DEFAULT_SERVICE_HOURS = {
Â  Â  breakfastStart: '08:00',
Â  Â  breakfastEnd: '11:00',
Â  Â  lunchStart: '12:00',
Â  Â  lunchEnd: '15:00',
};

// --- SparkleOverlay Component ---
const SparkleOverlay = () => {
Â  Â  const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
Â  Â  const sparks = Array.from({ length: 40 }).map((_, i) => {
Â  Â  Â  Â  const style = {
Â  Â  Â  Â  Â  Â  '--x': `${random(-150, 150)}vw`,
Â  Â  Â  Â  Â  Â  '--y': `${random(-150, 150)}vh`,
Â  Â  Â  Â  Â  Â  '--duration': `${random(8, 20)}s`,
Â  Â  Â  Â  Â  Â  '--delay': `${random(1, 10)}s`,
Â  Â  Â  Â  Â  Â  '--size': `${random(1, 3)}px`,
Â  Â  Â  Â  };
Â  Â  Â  Â  return <div key={i} className="spark" style={style}></div>;
Â  Â  });
Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <style>{`
Â  Â  Â  Â  Â  Â  Â  Â  @keyframes sparkle-animation { 0% { transform: scale(0) translate(0, 0); opacity: 0; } 50% { opacity: 1; } 100% { transform: scale(1) translate(var(--x), var(--y)); opacity: 0; } }
Â  Â  Â  Â  Â  Â  Â  Â  @keyframes background-pulse { 0%, 100% { filter: brightness(1); } 50% { filter: brightness(1.05); } }
Â  Â  Â  Â  Â  Â  Â  Â  .sparkle-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 0; overflow: hidden; animation: background-pulse 30s infinite ease-in-out; }
Â  Â  Â  Â  Â  Â  Â  Â  .spark { position: absolute; top: 50%; left: 50%; width: var(--size); height: var(--size); background-color: #fbbF24; border-radius: 50%; animation: sparkle-animation var(--duration) var(--delay) infinite linear; box-shadow: 0 0 4px #fbbF24, 0 0 8px #fbbF24; }
Â  Â  Â  Â  Â  Â  `}</style>
Â  Â  Â  Â  Â  Â  <div className="sparkle-container">{sparks}</div>
Â  Â  Â  Â  </>
Â  Â  );
};

// --- Ad Rotator Component ---
const AdRotatorComponent = ({ activeAds, showAdModal, setShowAdModal }) => {
Â  Â  const [currentAdIndex, setCurrentAdIndex] = useState(0);
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (activeAds && activeAds.length > 0 && !sessionStorage.getItem('adShown')) {
Â  Â  Â  Â  Â  Â  setShowAdModal(true);
Â  Â  Â  Â  Â  Â  sessionStorage.setItem('adShown', 'true');
Â  Â  Â  Â  }
Â  Â  }, [activeAds, setShowAdModal]);
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (!activeAds || activeAds.length < 2) return;
Â  Â  Â  Â  const timer = setInterval(() => setCurrentAdIndex(p => (p + 1) % activeAds.length), VIEWER_ROTATION_INTERVAL);
Â  Â  Â  Â  return () => clearInterval(timer);
Â  Â  }, [activeAds]);
Â  Â  if (!activeAds || activeAds.length === 0) return <div className="w-full max-w-lg mx-auto min-h-[400px] max-h-[600px] overflow-hidden relative mb-8 rounded-lg shadow-xl bg-slate-800/50 flex items-center justify-center border border-slate-700"><p className="text-2xl font-bold text-slate-400">No Advertisements Active</p></div>;
Â  Â  const currentAd = activeAds[currentAdIndex];
Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  {showAdModal && currentAd && <AdvertisementModal imageUrl={currentAd.imageUrl} onClose={() => setShowAdModal(false)} />}
Â  Â  Â  Â  Â  Â  <div className="w-full max-w-lg mx-auto min-h-[400px] max-h-[600px] overflow-hidden relative mb-8 rounded-lg shadow-xl bg-slate-800/50 flex items-center justify-center border border-slate-700">
Â  Â  Â  Â  Â  Â  Â  Â  {activeAds.map((ad, i) => <img key={ad._id || i} src={ad.imageUrl} alt={`Ad ${i + 1}`} className="absolute w-full h-full object-cover transition-opacity duration-500 ease-in-out" style={{ opacity: i === currentAdIndex ? 1 : 0 }} />)}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  );
};

// --- FeedbackButton Component ---
const FeedbackButton = () => {
Â  Â  const [isOpen, setIsOpen] = useState(false);
Â  Â  const [feedback, setFeedback] = useState('');
Â  Â  const [isSubmitting, setIsSubmitting] = useState(false);
Â  Â  const handleSubmit = async (e) => {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  if (!feedback.trim()) return;
Â  Â  Â  Â  setIsSubmitting(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const token = localStorage.getItem('token');
Â  Â  Â  Â  Â  Â  // ðŸŸ¢ FIX: Use dynamic API_BASE_URL
Â  Â  Â  Â  Â  Â  const response = await fetch(`${API_BASE_URL}/feedback`, {
Â  Â  Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify({ feedbackText: feedback }),
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error('Failed to submit feedback');
Â  Â  Â  Â  Â  Â  alert("Thank you for your feedback!");
Â  Â  Â  Â  Â  Â  setIsOpen(false);
Â  Â  Â  Â  Â  Â  setFeedback('');
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  alert("Sorry, we couldn't submit your feedback.");
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsSubmitting(false);
Â  Â  Â  Â  }
Â  Â  Â };
Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <button onClick={() => setIsOpen(true)} className="fixed bottom-6 right-6 bg-orange-500 text-white p-4 rounded-full shadow-lg hover:bg-orange-600 focus:outline-none focus:ring-4 focus:ring-orange-400/50 transition-all transform hover:scale-125 active:scale-95 z-40" title="Leave Feedback">
Â  Â  Â  Â  Â  Â  Â  Â  <FaCommentDots size={28} />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  {isOpen && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4 backdrop-blur-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg relative transform transition-all duration-300 scale-100">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-800 mb-4">Share Your Feedback</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setIsOpen(false)} className="absolute top-3 right-3 text-gray-400 hover:text-gray-700 text-3xl font-bold transition-transform hover:scale-110">&times;</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <textarea value={feedback} onChange={(e) => setFeedback(e.target.value)} className="w-full h-40 p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition-all text-gray-800" placeholder="Tell us what you think..." required />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-4 flex justify-end space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button type="button" onClick={() => setIsOpen(false)} className="py-2 px-4 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors text-gray-800">Cancel</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button type="submit" disabled={isSubmitting} className="py-2 px-4 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition disabled:bg-blue-300 disabled:cursor-not-allowed">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isSubmitting ? 'Submitting...' : 'Submit'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </>
Â  Â  Â );
};

// --- MenuItemCard Component ---
const MenuItemCard = ({ item, onAddToCart, isFavorite, onToggleFavorite }) => {
Â  Â  const isOutOfStock = item.stock <= 0;
Â  Â  let stockBadgeColor = isOutOfStock ? 'bg-red-600' : item.stock <= 10 ? 'bg-red-600' : item.stock <= 25 ? 'bg-yellow-600' : 'bg-green-600';
Â  Â  return (
Â  Â  Â  Â  <div className="bg-slate-800 rounded-xl shadow-lg overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-orange-500/50 hover:shadow-xl hover:-translate-y-2 border border-slate-700 hover:ring-2 hover:ring-orange-400/50 active:scale-[0.98] cursor-pointer">
Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  <img src={item.image || 'https://placehold.co/400x300/1e293b/475569?text=Image'} alt={item.name} className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300" />
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => onToggleFavorite(item._id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="absolute top-3 right-3 bg-slate-700/50 backdrop-blur-sm p-2 rounded-full z-10 transition-colors hover:bg-slate-700 hover:scale-110 active:scale-95"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title={isFavorite ? 'Remove from Favorites' : 'Add to Favorites'}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isFavorite ? <FaHeart className="text-red-500 transition-colors" size={20} /> : <FaRegHeart className="text-slate-300 transition-colors hover:text-red-400" size={20} />}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  {!isOutOfStock && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`absolute top-3 left-3 ${stockBadgeColor} text-white text-xs font-semibold px-2 py-1 rounded-full shadow-md transform group-hover:scale-105 transition-transform`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Stock: {item.stock}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-4 flex flex-col flex-grow">
Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-slate-100 capitalize truncate">{item.name}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xl font-bold text-white transition-colors group-hover:text-orange-300">â‚¹{item.price.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-2 py-1 text-xs font-semibold rounded-full transition-all ${isOutOfStock ? 'bg-red-200 text-red-900' : 'bg-green-200 text-green-900'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isOutOfStock ? 'Out of Stock' : 'In Stock'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => onAddToCart(item)} disabled={isOutOfStock} className="w-full mt-4 flex items-center justify-center gap-2 font-bold py-2.5 px-4 rounded-lg bg-orange-500 text-white hover:bg-orange-600 transition-all active:scale-[0.98] disabled:bg-slate-600 disabled:cursor-not-allowed">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaCartPlus className="group-hover:rotate-6 transition-transform" /> Add to Cart
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

// --- CategoryFilter Component ---
// *** FIX: Added default value [] for categories prop ***
const CategoryFilter = ({ categories = [], activeCategory, setActiveCategory }) => (
Â  Â  <div className="mb-8">
Â  Â  Â  Â  <h2 className="text-2xl font-bold text-slate-300 mb-4">What's on your mind?</h2>
Â  Â  Â  Â  <div className="flex space-x-4 overflow-x-auto pb-2 scroll-smooth">
Â  Â  Â  Â  Â  Â  {categories.map(cat => (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={cat.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setActiveCategory(cat.name)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`flex flex-col items-center justify-center space-y-2 w-20 flex-shrink-0 transition-all active:scale-95 ${activeCategory === cat.name ? 'text-orange-400' : 'text-slate-400 hover:text-orange-400 hover:scale-105'}`}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-300 ${activeCategory === cat.name ? 'bg-slate-700 ring-2 ring-orange-500 scale-105 shadow-lg shadow-orange-500/30' : 'bg-slate-800 hover:ring-1 hover:ring-slate-600'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <cat.icon size={32} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm font-semibold">{cat.name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  </div>
);

// --- SubCategory Card Component ---
const SubCategoryCard = ({ subCategory, onClick }) => (
Â  Â  <button onClick={onClick} className="bg-slate-800 rounded-xl shadow-lg overflow-hidden flex flex-col items-center group transition-all duration-300 hover:shadow-orange-500/50 hover:shadow-xl hover:-translate-y-2 border border-slate-700 hover:ring-2 hover:ring-orange-400/50 active:scale-[0.98] cursor-pointer p-4">
Â  Â  Â  Â  <img src={subCategory.imageUrl || 'https://placehold.co/200x200/1e293b/475569?text=Image'} alt={subCategory.name} className="w-32 h-32 object-cover rounded-full mb-3 group-hover:scale-105 transition-transform duration-300" />
Â  Â  Â  Â  <h4 className="text-md font-semibold text-slate-100 capitalize truncate group-hover:text-orange-300">{subCategory.name}</h4>
Â  Â  </button>
);

// --- Main Dashboard Page Component ---
const DashboardPage = () => {
Â  Â  const { handleAddToCart } = useCart();
Â  Â  const navigate = useNavigate();
Â  Â  const [menuItems, setMenuItems] = useState([]);
Â  Â  const [searchTerm, setSearchTerm] = useState('');
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  const [activeAds, setActiveAds] = useState([]);
Â  Â  const [showAdModal, setShowAdModal] = useState(false);
Â  Â  const [favorites, setFavorites] = useState([]);
Â  Â  const [isCanteenOpen, setIsCanteenOpen] = useState(true);
Â  Â  const [serviceHours, setServiceHours] = useState(DEFAULT_SERVICE_HOURS);
Â  Â  const [activeCategory, setActiveCategory] = useState('Snacks');
Â  Â  const [selectedSubCategoryId, setSelectedSubCategoryId] = useState(null);

Â  Â  // --- Utility functions ---
Â  Â  const timeToMinutes = (time) => {
Â  Â  Â  Â  if (!time) return -1;
Â  Â  Â  Â  const [h, m] = time.split(':').map(Number);
Â  Â  Â  Â  return h * 60 + m;
Â  Â  };

Â  Â  const isTimeSlotActive = useMemo(() => (startKey, endKey) => {
Â  Â  Â  Â  const hours = serviceHours || DEFAULT_SERVICE_HOURS;
Â  Â  Â  Â  const now = new Date();
Â  Â  Â  Â  const currentMinutes = now.getHours() * 60 + now.getMinutes();
Â  Â  Â  Â  const startMinutes = timeToMinutes(hours[startKey]);
Â  Â  Â  Â  const endMinutes = timeToMinutes(hours[endKey]);
Â  Â  Â  Â  return currentMinutes >= startMinutes && currentMinutes <= endMinutes;
Â  Â  }, [serviceHours]);

    // ðŸŸ¢ UPDATED: Include 'Essentials' category
Â  Â  const visibleCategories = useMemo(() => {
Â  Â  Â  Â  let categories = [
Â  Â  Â  Â  Â  Â  { name: 'Snacks', icon: GiIceCreamCone },
            { name: 'Essentials', icon: GiNotebook }, // ðŸŸ¢ Added Essentials
Â  Â  Â  Â  Â  Â  { name: 'Stationery', icon: GiNotebook },
Â  Â  Â  Â  Â  Â  { name: 'Favorites', icon: FaHeart }
Â  Â  Â  Â  ];
Â  Â  Â  Â  if (isTimeSlotActive('lunchStart', 'lunchEnd')) categories.unshift({ name: 'Lunch', icon: GiFastNoodles });
Â  Â  Â  Â  if (isTimeSlotActive('breakfastStart', 'breakfastEnd')) categories.unshift({ name: 'Breakfast', icon: GiHotMeal });
Â  Â  Â  Â  return Array.from(new Map(categories.map(cat => [cat.name, cat])).values());
Â  Â  }, [isTimeSlotActive]);

Â  Â  // Sync activeCategory effect
Â  Â  useEffect(() => {
Â  Â  Â  Â  const newActiveCategory = (() => {
Â  Â  Â  Â  Â  Â  if (isTimeSlotActive('breakfastStart', 'breakfastEnd')) return 'Breakfast';
Â  Â  Â  Â  Â  Â  if (isTimeSlotActive('lunchStart', 'lunchEnd')) return 'Lunch';
Â  Â  Â  Â  Â  Â  return 'Snacks';
Â  Â  Â  Â  })();
Â  Â  Â  Â  if (activeCategory !== newActiveCategory || (activeCategory !== 'Snacks' && newActiveCategory === 'Snacks')) {
Â  Â  Â  Â  Â  Â  Â setActiveCategory(newActiveCategory);
Â  Â  Â  Â  }
Â  Â  // eslint-disable-next-line react-hooks/exhaustive-deps
Â  Â  }, [isTimeSlotActive]);

Â  Â  // --- Data Fetching ---
Â  Â  const fetchCanteenStatusAndHours = async () => {
Â  Â  Â  Â  // console.log("FETCHING STATUS & HOURS..."); // Keep if needed
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const [statusRes, hoursRes] = await Promise.all([
Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŸ¢ FIX: Use dynamic API_BASE_URL
Â  Â  Â  Â  Â  Â  Â  Â  axios.get(`${API_BASE_URL}/canteen-status/public`),
Â  Â  Â  Â  Â  Â  Â  Â  axios.get(`${API_BASE_URL}/service-hours/public`)
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  Â  Â  const isOpen = statusRes.data.isOpen;
Â  Â  Â  Â  Â  Â  setIsCanteenOpen(isOpen);
Â  Â  Â  Â  Â  Â  if (hoursRes.data) setServiceHours(hoursRes.data);
Â  Â  Â  Â  Â  Â  // console.log("Status isOpen:", isOpen, "Hours:", hoursRes.data); // Keep if needed
Â  Â  Â  Â  Â  Â  return isOpen;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Could not fetch canteen status or hours.", err);
Â  Â  Â  Â  Â  Â  setIsCanteenOpen(false);
Â  Â  Â  Â  Â  Â  setError("Could not get canteen status. Assuming closed.");
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  const fetchDashboardData = async () => {
Â  Â  Â  Â  Â  Â  // console.log("1. Starting fetchDashboardData..."); // Keep if needed
Â  Â  Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  Â  Â  setError(null);

Â  Â  Â  Â  Â  Â  // console.log("2. Calling fetchCanteenStatusAndHours..."); // Keep if needed
Â  Â  Â  Â  Â  Â  const isOpen = await fetchCanteenStatusAndHours();
Â  Â  Â  Â  Â  Â  // console.log("3. Canteen status isOpen:", isOpen); // Keep if needed

Â  Â  Â  Â  Â  Â  if (!isOpen) {
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("4. Canteen is closed, stopping data fetch."); // Keep if needed
Â  Â  Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("5. Canteen is open, fetching student data..."); // Keep if needed
Â  Â  Â  Â  Â  Â  Â  Â  const studentDataString = localStorage.getItem('student');
Â  Â  Â  Â  Â  Â  Â  Â  if (studentDataString) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const studentData = JSON.parse(studentDataString);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (studentData && studentData.favorites) setFavorites(studentData.favorites);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("6. Fetching menu and ads..."); // Keep if needed

Â  Â  Â  Â  Â  Â  Â  Â  const [menuRes, adRes] = await Promise.all([
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸŸ¢ FIX: Use dynamic API_BASE_URL
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fetch(`${API_BASE_URL}/menu`),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fetch(`${API_BASE_URL}/advertisements/active`)
Â  Â  Â  Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  Â  Â  Â  // console.log("7. Menu response status:", menuRes.status); // Keep if needed
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("8. Ads response status:", adRes.status); // Keep if needed

Â  Â  Â  Â  Â  Â  Â  Â  if (!menuRes.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const errorText = await menuRes.text();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error(`Failed to fetch menu. Status: ${menuRes.status}. Response: ${errorText}`);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  const menuData = await menuRes.json();
Â  Â  Â  Â  Â  Â  Â  Â  if (!Array.isArray(menuData)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Received non-array menu data:", menuData);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error("Invalid menu data received from server.");
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  setMenuItems(menuData.map(item => ({ ...item, image: item.imageUrl })));
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("9. Menu items set."); // Keep if needed

Â  Â  Â  Â  Â  Â  Â  Â  if (adRes.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const adData = await adRes.json();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â if (!Array.isArray(adData)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.error("Received non-array ad data:", adData);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â throw new Error("Invalid ad data received from server.");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setActiveAds(adData);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // console.log("10. Active ads set."); // Keep if needed
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.warn("Failed to fetch ads, status:", adRes.status);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Dashboard Fetch Error:", err);
Â  Â  Â  Â  Â  Â  Â  Â  setError(`Could not fetch data: ${err.message}`);
Â  Â  Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  Â  Â  // console.log("11. Setting loading to false."); // Keep if needed
Â  Â  Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  fetchDashboardData();

Â  Â  Â  Â  const interval = setInterval(fetchCanteenStatusAndHours, POLLING_INTERVAL);
Â  Â  Â  Â  return () => clearInterval(interval);

Â  Â  }, [navigate]); // Using navigate here is fine, ensures fetch on initial load/redirect

Â  Â  // --- toggleFavorite function ---
Â  Â  const toggleFavorite = async (itemId) => {
Â  Â  Â  Â  const token = localStorage.getItem('token');
Â  Â  Â  Â  if (!token) {
Â  Â  Â  Â  Â  Â  alert('Please log in to manage your favorites.');
Â  Â  Â  Â  Â  Â  return navigate('/login');
Â  Â  Â  Â  }
Â  Â  Â  Â  const originalFavorites = [...favorites];
Â  Â  Â  Â  const isCurrentlyFavorite = originalFavorites.includes(itemId);
Â  Â  Â  Â  const newFavorites = isCurrentlyFavorite ? originalFavorites.filter(id => id !== itemId) : [...originalFavorites, itemId];
Â  Â  Â  Â  setFavorites(newFavorites);
Â  Â  Â  Â  const studentDataString = localStorage.getItem('student');
Â  Â  Â  Â  if (studentDataString) {
Â  Â  Â  Â  Â  Â  const studentData = JSON.parse(studentDataString);
Â  Â  Â  Â  Â  Â  studentData.favorites = newFavorites;
Â  Â  Â  Â  Â  Â  localStorage.setItem('student', JSON.stringify(studentData));
Â  Â  Â  Â  }
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const method = isCurrentlyFavorite ? 'DELETE' : 'POST';
Â  Â  Â  Â  Â  Â  // ðŸŸ¢ FIX: Use dynamic API_BASE_URL
Â  Â  Â  Â  Â  Â  const endpoint = `${API_BASE_URL}/student/favorites/${itemId}`;
Â  Â  Â  Â  Â  Â  // ðŸŸ¢ FIX: Use Authorization header for consistency with backend
Â  Â  Â  Â  Â  Â  const response = await fetch(endpoint, { 
                method, 
                headers: { 
                    'Authorization': `Bearer ${token}` 
                } 
            });
Â  Â  Â  Â  Â  Â  if (response.status === 401) {
Â  Â  Â  Â  Â  Â  Â  Â  alert('Session expired. Please log in again.');
Â  Â  Â  Â  Â  Â  Â  Â  localStorage.clear();
Â  Â  Â  Â  Â  Â  Â  Â  return navigate('/login');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error('Server update failed.');
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  setFavorites(originalFavorites);
Â  Â  Â  Â  Â  Â  if (studentDataString) { /* revert local storage */ }
Â  Â  Â  Â  Â  Â  alert('Failed to update favorites. Please try again.');
Â  Â  Â  Â  }
Â  Â  Â };

Â  Â  // --- Filtering Logic ---
Â  Â  let filteredItems;
Â  Â  let pageTitle;
Â  Â  let availableSubCategories = [];

Â  Â  const availableItems = useMemo(() => {
Â  Â  Â  Â  return menuItems.filter(item => {
Â  Â  Â  Â  Â  Â  if (item.stock <= 0) return false;
            // ðŸŸ¢ UPDATED: Allow Stationery and Essentials when canteen is open
Â  Â  Â  Â  Â  Â  if (item.category === 'Snacks' || item.category === 'Stationery' || item.category === 'Essentials') return true; 
Â  Â  Â  Â  Â  Â  if (item.category === 'Breakfast' && isTimeSlotActive('breakfastStart', 'breakfastEnd')) return true;
Â  Â  Â  Â  Â  Â  if (item.category === 'Lunch' && isTimeSlotActive('lunchStart', 'lunchEnd')) return true;
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  });
Â  Â  }, [menuItems, isTimeSlotActive]);

Â  Â  if (searchTerm.trim()) {
Â  Â  Â  Â  pageTitle = `Searching for "${searchTerm}"`;
Â  Â  Â  Â  filteredItems = availableItems.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()));
Â  Â  Â  Â  if (selectedSubCategoryId) setSelectedSubCategoryId(null);
Â  Â  } else {
Â  Â  Â  Â  pageTitle = activeCategory;
Â  Â  Â  Â  if (activeCategory === 'Favorites') {
Â  Â  Â  Â  Â  Â  const favIds = new Set(favorites);
Â  Â  Â  Â  Â  Â  filteredItems = availableItems.filter(item => favIds.has(item._id));
Â  Â  Â  Â  Â  Â  if (selectedSubCategoryId) setSelectedSubCategoryId(null);
Â  Â  Â  Â  } else if (activeCategory === 'Snacks') {
Â  Â  Â  Â  Â  Â  const snackItems = availableItems.filter(item => item.category === 'Snacks');
Â  Â  Â  Â  Â  Â  const subMap = new Map();
Â  Â  Â  Â  Â  Â  snackItems.forEach(item => {
Â  Â  Â  Â  Â  Â  Â  Â  // Ensure subCategory exists and has an _id before adding
Â  Â  Â  Â  Â  Â  Â  Â  if (item.subCategory && item.subCategory._id && !subMap.has(item.subCategory._id)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  subMap.set(item.subCategory._id, item.subCategory);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  availableSubCategories = Array.from(subMap.values()).sort((a, b) => a.name.localeCompare(b.name));

Â  Â  Â  Â  Â  Â  if (selectedSubCategoryId) {
Â  Â  Â  Â  Â  Â  Â  Â  const selectedSub = availableSubCategories.find(sub => sub._id === selectedSubCategoryId);
Â  Â  Â  Â  Â  Â  Â  Â  pageTitle = selectedSub ? selectedSub.name : 'Snacks';
Â  Â  Â  Â  Â  Â  Â  Â  filteredItems = snackItems.filter(item => item.subCategory && item.subCategory._id === selectedSubCategoryId);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  filteredItems = [];
Â  Â  Â  Â  Â  Â  Â  Â  pageTitle = 'Snacks - Choose a type';
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  filteredItems = availableItems.filter(item => item.category === activeCategory);
Â  Â  Â  Â  Â  Â  if (selectedSubCategoryId) setSelectedSubCategoryId(null);
Â  Â  Â  Â  Â  Â  // Time slot inactive title logic...
Â  Â  Â  Â  Â  Â  if (activeCategory === 'Breakfast' && !isTimeSlotActive('breakfastStart', 'breakfastEnd')) {
Â  Â  Â  Â  Â  Â  Â  Â  pageTitle = `Breakfast (Available ${serviceHours.breakfastStart} - ${serviceHours.breakfastEnd})`;
Â  Â  Â  Â  Â  Â  } else if (activeCategory === 'Lunch' && !isTimeSlotActive('lunchStart', 'lunchEnd')) {
Â  Â  Â  Â  Â  Â  Â  Â  pageTitle = `Lunch (Available ${serviceHours.lunchStart} - ${serviceHours.lunchEnd})`;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }

Â  Â  const handleSubCategoryClick = (subId) => setSelectedSubCategoryId(subId);
Â  Â  const handleBackToSubCategories = () => setSelectedSubCategoryId(null);
Â  Â  useEffect(() => { setSelectedSubCategoryId(null); }, [activeCategory]);


Â  Â  // --- Render ---
Â  Â  return (
Â  Â  Â  Â  <div className="bg-slate-900 min-h-screen font-sans relative">
Â  Â  Â  Â  Â  Â  <SparkleOverlay />
Â  Â  Â  Â  Â  Â  <div className="relative z-10">
Â  Â  Â  Â  Â  Â  Â  Â  <Navbar searchTerm={searchTerm} setSearchTerm={setSearchTerm} isCanteenOpen={isCanteenOpen} />
Â  Â  Â  Â  Â  Â  Â  Â  <main className="container mx-auto p-4 md:p-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!isCanteenOpen ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-40">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-4xl font-extrabold text-red-500 mb-4">Canteen is Currently CLOSED â›”</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xl text-slate-400">Please check back later!</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : loading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="text-center p-10 font-semibold text-slate-400 flex justify-center items-center space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <svg className="animate-spin h-5 w-5 text-orange-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Loading Menu... ðŸ˜‹</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : error ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center bg-slate-800 p-10 rounded-lg shadow-md border-l-4 border-red-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-red-400">Error ðŸ˜Ÿ</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-slate-300 mt-2">{error}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AdRotatorComponent activeAds={activeAds} showAdModal={showAdModal} setShowAdModal={setShowAdModal} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CategoryFilter categories={visibleCategories} activeCategory={activeCategory} setActiveCategory={setActiveCategory} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-extrabold text-slate-100">{pageTitle}</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {activeCategory === 'Snacks' && selectedSubCategoryId && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleBackToSubCategories} className="flex items-center gap-2 text-sm text-orange-400 hover:text-orange-300 transition-colors bg-slate-700/50 px-3 py-1 rounded-md">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaArrowLeft /> Back
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Conditional Rendering: Subcategories or Items */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {activeCategory === 'Snacks' && !selectedSubCategoryId && !searchTerm.trim() ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  availableSubCategories.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 md:gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {availableSubCategories.map(sub => <SubCategoryCard key={sub._id} subCategory={sub} onClick={() => handleSubCategoryClick(sub._id)} />)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 bg-slate-800 rounded-lg shadow-sm"><p className="text-slate-400">No Snack subcategories available.</p></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : ( // Show Items
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  filteredItems.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {filteredItems.map(item => <MenuItemCard key={item._id} item={item} onAddToCart={handleAddToCart} isFavorite={favorites.includes(item._id)} onToggleFavorite={toggleFavorite} />)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 bg-slate-800 rounded-lg shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-slate-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {searchTerm.trim() ? "No available items match your search." :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeCategory === 'Favorites' ? "You haven't added any favorites yet." :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeCategory === 'Snacks' && selectedSubCategoryId ? `No items available in this subcategory right now.` :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  `No ${activeCategory} items available right now.`
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  Â  Â  Â  Â  {isCanteenOpen && <FeedbackButton />}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default DashboardPage;